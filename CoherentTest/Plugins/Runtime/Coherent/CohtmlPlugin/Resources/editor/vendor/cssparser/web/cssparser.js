/** cssparser - v0.2.2 - 2015-04-25
 * http://cwdoh.github.io/cssparser.js/
 * Git Build: SHA1 : 6d61b6af6cb69ef45dd8d7d32102c20698a8ec62
 * Copyright (c) 2015 Chang W. Doh; Licensed MIT, http://www.opensource.org/licenses/mit-license.php
 **/

/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15,20,22,25,31,38,42,46,51,60,64,65,94,96,97,103],$V1=[1,15,20,22,25,31,38,42,46,51,60,64,65,103],$V2=[2,124],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[2,121],$V7=[1,11],$V8=[1,20,22,25,31,38,42,46,51,60,64,65,103],$V9=[1,17],$Va=[1,15,20,22,25,31,33,38,42,46,51,60,64,65,94,96,97,103],$Vb=[1,19],$Vc=[1,11,12,15,20,22,23,25,31,32,33,36,37,38,39,42,46,48,49,51,56,60,64,65,66,69,70,71,72,73,74,75,78,83,84,85,86,87,88,89,90,91,93,94,96,97,103],$Vd=[1,25],$Ve=[2,123],$Vf=[2,8],$Vg=[11,23],$Vh=[1,50],$Vi=[1,32],$Vj=[1,40],$Vk=[1,58],$Vl=[1,41],$Vm=[1,42],$Vn=[1,51],$Vo=[1,52],$Vp=[1,56],$Vq=[1,57],$Vr=[1,45],$Vs=[1,20,22,25,31,38,42,46,51,60,64,65,94,96,97,103],$Vt=[1,61],$Vu=[1,62],$Vv=[1,22,31,33,38,42,46,51,60,64,65,94,96,97,103],$Vw=[22,38,51,60,64,65,94],$Vx=[2,58],$Vy=[2,52],$Vz=[1,73],$VA=[1,74],$VB=[22,32,38,39,49,51,56,60,64,65,94],$VC=[2,63],$VD=[2,33],$VE=[1,105],$VF=[1,106],$VG=[1,107],$VH=[1,103],$VI=[1,104],$VJ=[1,110],$VK=[1,102],$VL=[1,94],$VM=[1,95],$VN=[1,96],$VO=[1,97],$VP=[1,98],$VQ=[1,99],$VR=[1,100],$VS=[1,101],$VT=[1,108],$VU=[11,12,22,23,36,37,38,39,48,49,60,75,83,84,85,86,87,88,89,90,91],$VV=[12,22,33,51],$VW=[22,38,51,60,64,65],$VX=[32,38,94],$VY=[1,132],$VZ=[1,133],$V_=[1,134],$V$=[1,135],$V01=[11,12,22,23,32,36,37,38,39,48,49,60,75,83,84,85,86,87,88,89,90,91,94],$V11=[1,140],$V21=[1,141],$V31=[1,139],$V41=[11,12,22,23,32,33,36,37,38,39,48,49,51,60,69,75,78,83,84,85,86,87,88,89,90,91,93,94],$V51=[11,12,22,23,32,33,36,37,38,39,48,49,51,60,69,75,78,83,84,85,86,87,88,89,90,91,93],$V61=[11,22,23,48,49,60,75,83,84,85,86,87,88,89,90,91],$V71=[75,83,84,85,86,87,88,89,90],$V81=[11,12,22,23,36,37,38,39,48,49,60,75,83,84,85,86,87,88,89,90,91,94],$V91=[1,160],$Va1=[1,163],$Vb1=[2,92],$Vc1=[1,164],$Vd1=[32,94],$Ve1=[11,12,22,23,32,36,37,38,39,48,49,60,75,83,84,85,86,87,88,89,90,91],$Vf1=[12,22,33,51,94],$Vg1=[2,53],$Vh1=[11,22,33,84],$Vi1=[1,22,31,33,38,42,46,51,60,64,65,96,97,103],$Vj1=[1,219],$Vk1=[1,218],$Vl1=[1,220],$Vm1=[22,32,37,38,39,49,51,56,60,64,65,94],$Vn1=[11,22,94],$Vo1=[32,39],$Vp1=[32,39,94],$Vq1=[66,94];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"charset":4,"space_cdata_list":5,"import_list":6,"namespace_list":7,"general_list":8,"CHARSET_SYM":9,"wempty":10,"STRING":11,";":12,"import_item":13,"import":14,"IMPORT_SYM":15,"string_or_uri":16,"media_query_list":17,"namespace_item":18,"namespace":19,"NAMESPACE_SYM":20,"namespace_prefix":21,"IDENT":22,"URI":23,"general_item":24,"null":25,"ruleset":26,"media":27,"page":28,"font_face":29,"keyframes":30,"MEDIA_SYM":31,"{":32,"}":33,"media_query":34,"media_combinator":35,"(":36,")":37,":":38,",":39,"whitespace":40,"expr":41,"PAGE_SYM":42,"page_ident":43,"pseudo_page":44,"declaration_list":45,"FONT_FACE_SYM":46,"unary_operator":47,"-":48,"+":49,"property":50,"*":51,"selector_list":52,"selector":53,"simple_selector":54,"combinator":55,">":56,"simple_selector_atom_list":57,"element_name":58,"simple_selector_atom":59,"HASH":60,"class":61,"attrib":62,"pseudo":63,".":64,"[":65,"]":66,"attrib_operator":67,"attrib_value":68,"=":69,"INCLUDES":70,"DASHMATCH":71,"PREFIXMATCH":72,"SUFFIXMATCH":73,"SUBSTRINGMATCH":74,"FUNCTION":75,"declaration_parts":76,"declaration":77,"IMPORTANT_SYM":78,"term":79,"operator":80,"computable_term":81,"string_term":82,"NUMBER":83,"PERCENTAGE":84,"LENGTH":85,"EMS":86,"EXS":87,"ANGLE":88,"TIME":89,"FREQ":90,"UNICODERANGE":91,"hexcolor":92,"/":93,"S":94,"space_cdata":95,"CDO":96,"CDC":97,"keyframe_symbol":98,"keyframe_list":99,"keyframe":100,"keyframe_offset_list":101,"keyframe_offset":102,"KEYFRAMES":103,"$accept":0,"$end":1},
terminals_: {2:"error",9:"CHARSET_SYM",11:"STRING",12:";",15:"IMPORT_SYM",20:"NAMESPACE_SYM",22:"IDENT",23:"URI",25:"null",31:"MEDIA_SYM",32:"{",33:"}",36:"(",37:")",38:":",39:",",42:"PAGE_SYM",46:"FONT_FACE_SYM",48:"-",49:"+",51:"*",56:">",60:"HASH",64:".",65:"[",66:"]",69:"=",70:"INCLUDES",71:"DASHMATCH",72:"PREFIXMATCH",73:"SUFFIXMATCH",74:"SUBSTRINGMATCH",75:"FUNCTION",78:"IMPORTANT_SYM",83:"NUMBER",84:"PERCENTAGE",85:"LENGTH",86:"EMS",87:"EXS",88:"ANGLE",89:"TIME",90:"FREQ",91:"UNICODERANGE",93:"/",94:"S",96:"CDO",97:"CDC",103:"KEYFRAMES"},
productions_: [0,[3,5],[4,5],[4,0],[6,1],[6,2],[6,0],[13,1],[13,1],[14,6],[7,1],[7,2],[7,0],[18,1],[18,1],[19,6],[21,2],[21,1],[16,2],[16,2],[8,1],[8,2],[8,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[27,8],[17,1],[17,2],[17,3],[17,0],[35,2],[35,2],[35,2],[35,2],[35,1],[34,1],[34,0],[28,10],[43,1],[43,0],[44,2],[44,0],[29,7],[47,1],[47,1],[50,2],[50,3],[26,6],[52,1],[52,4],[53,1],[53,3],[55,2],[55,2],[55,0],[54,2],[54,3],[57,1],[57,2],[57,0],[59,1],[59,1],[59,1],[59,1],[61,2],[58,1],[58,1],[62,5],[62,9],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[68,1],[68,1],[63,2],[63,6],[63,6],[63,3],[45,1],[45,2],[76,1],[76,1],[76,1],[77,5],[77,6],[77,0],[41,1],[41,3],[41,2],[79,1],[79,2],[79,1],[81,2],[81,2],[81,2],[81,2],[81,2],[81,2],[81,2],[81,2],[81,5],[82,2],[82,2],[82,2],[82,2],[82,1],[80,2],[80,2],[80,2],[80,0],[92,2],[40,1],[40,2],[10,1],[10,0],[5,1],[5,2],[5,0],[95,1],[95,1],[95,1],[30,8],[99,1],[99,2],[99,0],[100,6],[101,2],[101,4],[102,1],[102,1],[102,1],[98,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

  		this.$ = {};
  		if ( $$[$0-4] )
  		  	this.$["charset"]	= $$[$0-4];
  		if ( $$[$0-2] )
  			this.$["imports"]	= $$[$0-2];
  		if ( $$[$0-1] )
  			this.$["namespaces"]	= $$[$0-1];
  		if ( $$[$0] )
  			this.$["rulelist"]	= $$[$0];

  		return this.$;
  	
break;
case 2:
this.$ = $$[$0-2];
break;
case 3: case 40: case 43: case 45: case 58: case 63: case 116: case 121:
this.$ = "";
break;
case 4: case 10: case 20:

  		this.$ = [];
  		if ( $$[$0] !== null )
  			this.$.push ( $$[$0] );
  	
break;
case 5: case 11:

  		this.$ = $$[$0-1];
  		if ( $$[$0] !== null )
  			this.$.push ( $$[$0] );
  	
break;
case 6: case 8: case 12: case 14: case 17: case 28: case 33: case 88: case 89: case 92: case 122: case 123: case 125: case 126: case 127:
this.$ = null;
break;
case 7: case 13: case 23: case 24: case 25: case 26: case 27: case 30: case 39: case 42: case 47: case 48: case 52: case 54: case 61: case 64: case 65: case 66: case 67: case 69: case 70: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 87: case 93: case 96: case 98: case 112: case 120: case 135: case 136: case 137:
this.$ = $$[$0];
break;
case 9:

  		this.$ = {
  			"import": $$[$0-3]
  		};

  		if ( $$[$0-2] != null )
	  		this.$[ "mediaqueries" ] = $$[$0-2];
  	
break;
case 15:

  		this.$ = {
  			"namespace": $$[$0-2]
  		};
  		
  		if ( $$[$0-3] )
	  		this.$["prefix"] = $$[$0-3];
  	
break;
case 16: case 18: case 19: case 35: case 36: case 49: case 56: case 57: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 108: case 109: case 110: case 111: case 113: case 114: case 115: case 117: case 133:
this.$ = $$[$0-1];
break;
case 21: case 130:

  		this.$ = $$[$0-1];
  		this.$.push( $$[$0] );
  	
break;
case 29:
this.$ = { "type": "media", "mediaqueries" : $$[$0-5], "children": $$[$0-2] };
break;
case 31: case 95:
this.$ = $$[$0-1] + ' ' + $$[$0];
break;
case 32: case 55: case 94:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 34:
this.$ = ' ' + $$[$0-1]				/* cwdoh; for beatify */;
break;
case 37:
this.$ = ", ";
break;
case 38: case 118: case 119:
this.$ = ' ';
break;
case 41:
this.$ =	{ "id": $$[$0-7], "pseudo": $$[$0-6], "declarations": $$[$0-2] };
break;
case 44: case 62: case 68: case 81: case 97:
this.$ = $$[$0-1] + $$[$0];
break;
case 46:
this.$ = { "type": "fontface", "declarations": $$[$0-2] };
break;
case 50:
this.$ = $$[$0-2] + $$[$0-1]			/* cwdoh; */;
break;
case 51:
this.$ = { "type": "style", "selector": $$[$0-5], "declarations": $$[$0-2] };
break;
case 53:
this.$ = $$[$0-3] + $$[$0-2] + ' ' + $$[$0];
break;
case 59:
this.$ = $$[$0-1] + " ";
break;
case 60:
this.$ = $$[$0-2] + $$[$0-1];
break;
case 71:
this.$ = $$[$0-4] + $$[$0-2] + $$[$0];
break;
case 72:
this.$ = $$[$0-8] + $$[$0-6] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0];
break;
case 82:
this.$ = $$[$0-5] + $$[$0-4] + $$[$0-2] + $$[$0];
break;
case 83:
this.$ = $$[$0-5] + $$[$0-4] + $$[$0-2] + $$[$0]		/* cwdoh; modern browsers allow attrib in pseudo function? */;
break;
case 84:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0]				/* cwdoh; is "::" moz extension? */;
break;
case 85:

  		this.$ = {};
  		if ( $$[$0] !== null ) {
        if(!this.$[ $$[$0][0] ]){
          this.$[ $$[$0][0] ] = $$[$0][1];
        } else if(Object.prototype.toString.call(this.$[ $$[$0][0] ]) === '[object Array]') {
          this.$[ $$[$0][0] ].push($$[$0][1]);
        } else {
          this.$[ $$[$0][0] ] = [ this.$[ $$[$0][0] ], $$[$0][1] ];
        }
  		}
  	
break;
case 86:

  		this.$ = $$[$0-1];
  		if ( $$[$0] !== null ) {
        if(!this.$[ $$[$0][0] ]){
          this.$[ $$[$0][0] ] = $$[$0][1];
        } else if(Object.prototype.toString.call(this.$[ $$[$0][0] ]) === '[object Array]') {
          this.$[ $$[$0][0] ].push($$[$0][1]);
        } else {
          this.$[ $$[$0][0] ] = [ this.$[ $$[$0][0] ], $$[$0][1] ];
        }
	  	}
  	
break;
case 90:
this.$ = [ $$[$0-4], $$[$0-1] ];
break;
case 91:
this.$ = [ $$[$0-5], $$[$0-2] + " !important" ];
break;
case 107:
this.$ = $$[$0-4] + $$[$0-2] + $$[$0-1];
break;
case 128:
this.$ = { "type": "keyframes", "id": $$[$0-6],	"keyframes": $$[$0-2], "prefix": $$[$0-7] };
break;
case 129:
this.$ = [ $$[$0] ];
break;
case 131:
this.$ = [];
break;
case 132:
this.$ = { "type": "keyframe", "offset": $$[$0-5], "declarations": $$[$0-2] };
break;
case 134:
this.$ = $$[$0-3] + ", " + $$[$0-2];
break;
case 138:
this.$ = $$[$0-1].split( new RegExp("@([-a-zA-Z0-9]*)keyframes", "g") )[1]		/* only prefix */;
break;
}
},
table: [o($V0,[2,3],{3:1,4:2,9:[1,3]}),{1:[3]},o($V1,$V2,{5:4,95:5,94:$V3,96:$V4,97:$V5}),{10:9,11:$V6,40:10,94:$V7},o($V8,[2,6],{6:12,95:13,13:14,14:15,5:16,15:$V9,94:$V3,96:$V4,97:$V5}),o($Va,[2,122]),o($Va,[2,125]),o($Va,[2,126]),o($Va,[2,127]),{11:[1,18]},o([1,11,12,15,20,22,23,25,31,32,33,36,37,38,39,42,46,48,49,51,56,60,64,65,66,69,70,71,72,73,74,75,78,83,84,85,86,87,88,89,90,91,93,96,97,103],[2,120],{94:$Vb}),o($Vc,[2,118]),o([1,22,25,31,38,42,46,51,60,64,65,103],[2,12],{95:5,14:15,7:20,13:21,18:22,5:23,19:24,15:$V9,20:$Vd,94:$V3,96:$V4,97:$V5}),o($V0,$Ve),o($V0,[2,4]),o($V0,[2,7]),o($V1,$Vf,{95:26,94:$V3,96:$V4,97:$V5}),o($Vg,$V6,{40:10,10:27,94:$V7}),{10:28,12:$V6,40:10,94:$V7},o($Vc,[2,119]),{1:$V2,5:33,8:29,18:30,19:24,20:$Vd,22:$Vh,24:31,25:$Vi,26:34,27:35,28:36,29:37,30:38,31:$Vj,38:$Vk,42:$Vl,46:$Vm,51:$Vn,52:39,53:44,54:46,57:47,58:48,59:49,60:$Vo,61:53,62:54,63:55,64:$Vp,65:$Vq,94:$V3,95:5,96:$V4,97:$V5,98:43,103:$Vr},o($V0,[2,5]),o($Vs,[2,10]),o($V1,$Vf,{95:26,94:$V3,96:$V4,97:$V5}),o($Vs,[2,13]),o([11,22,23],$V6,{40:10,10:59,94:$V7}),o($Va,$Ve),{11:$Vt,16:60,23:$Vu},{12:[1,63]},{1:[2,1],5:65,22:$Vh,24:64,26:34,27:35,28:36,29:37,30:38,31:$Vj,38:$Vk,42:$Vl,46:$Vm,51:$Vn,52:39,53:44,54:46,57:47,58:48,59:49,60:$Vo,61:53,62:54,63:55,64:$Vp,65:$Vq,94:$V3,95:5,96:$V4,97:$V5,98:43,103:$Vr},o($Vs,[2,11]),o($Vv,[2,20]),o($Vv,[2,22]),o($V8,[2,14],{95:26,94:$V3,96:$V4,97:$V5}),o($Vv,[2,23]),o($Vv,[2,24]),o($Vv,[2,25]),o($Vv,[2,26]),o($Vv,[2,27]),{32:[1,66],39:[1,67]},o([11,22,23,32,36,37,38,39,48,49,60,75,83,84,85,86,87,88,89,90,91],$V6,{40:10,10:68,94:$V7}),o([22,32,38],$V6,{40:10,10:69,94:$V7}),{10:70,32:$V6,40:10,94:$V7},{22:[1,71]},o($Vw,$Vx,{55:72,32:$Vy,39:$Vy,49:$Vz,56:$VA}),{10:75,22:$V6,40:10,94:$V7},o($VB,[2,54]),{38:$Vk,40:76,59:77,60:$Vo,61:53,62:54,63:55,64:$Vp,65:$Vq,94:$V7},o([22,32,39,49,51,56,94],$VC,{59:49,61:53,62:54,63:55,57:78,38:$Vk,60:$Vo,64:$Vp,65:$Vq}),o($VB,[2,61]),o($VB,[2,69]),o($VB,[2,70]),o($VB,[2,64]),o($VB,[2,65]),o($VB,[2,66]),o($VB,[2,67]),{22:[1,79]},{10:80,22:$V6,40:10,94:$V7},{22:[1,81],38:[1,83],75:[1,82]},o($Vg,$V6,{40:10,21:84,10:86,22:[1,85],94:$V7}),o([12,36,37,38,39,94],$VD,{17:87,34:88,41:89,79:90,81:91,47:92,82:93,92:109,11:$VE,22:$VF,23:$VG,48:$VH,49:$VI,60:$VJ,75:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT}),o($VU,$V6,{40:10,10:111,94:$V7}),o($VU,$V6,{40:10,10:112,94:$V7}),o($V0,[2,2]),o($Vv,[2,21]),o([1,22,31,33,38,42,46,51,60,64,65,103],[2,28],{95:26,94:$V3,96:$V4,97:$V5}),o($VV,$V6,{40:10,10:113,94:$V7}),o($VW,$V6,{40:10,10:114,94:$V7}),o([32,36,37,38,39,94],$VD,{34:88,41:89,79:90,81:91,47:92,82:93,92:109,17:115,11:$VE,22:$VF,23:$VG,48:$VH,49:$VI,60:$VJ,75:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT}),o($VX,[2,43],{43:116,22:[1,117]}),{32:[1,118]},{10:119,32:$V6,40:10,94:$V7},{22:$Vh,38:$Vk,51:$Vn,54:120,57:47,58:48,59:49,60:$Vo,61:53,62:54,63:55,64:$Vp,65:$Vq,94:$VC},o($VW,$V6,{40:10,10:121,94:$V7}),o($VW,$V6,{40:10,10:122,94:$V7}),{22:[2,138]},o([22,32,38,39,49,51,56,60,64,65],[2,59],{94:$Vb}),o($VB,[2,62]),o([22,32,39,49,51,56],$V6,{40:10,61:53,62:54,63:55,59:77,10:123,38:$Vk,60:$Vo,64:$Vp,65:$Vq,94:$V7}),o($VB,[2,68]),{22:[1,124]},o($VB,[2,81]),o([22,65],$V6,{40:10,10:125,94:$V7}),{22:[1,126]},{11:$Vt,16:127,23:$Vu},o($Vg,$V6,{40:10,10:128,94:$V7}),o($Vg,[2,17]),{11:$VE,12:[1,129],22:$VF,23:$VG,34:130,35:131,36:$VY,37:$VZ,38:$V_,39:$V$,40:136,41:89,47:92,48:$VH,49:$VI,60:$VJ,75:$VK,79:90,81:91,82:93,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:109,94:$V7},o($V01,[2,30]),o([12,32,36,37,38,94],[2,39],{81:91,47:92,82:93,92:109,80:137,79:138,11:$VE,22:$VF,23:$VG,39:$V11,48:$VH,49:$VI,60:$VJ,69:$V21,75:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,93:$V31}),o($V41,[2,93]),o($V41,[2,96]),{75:$VK,81:142,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS},o($V41,[2,98]),o($V51,$V6,{40:10,10:143,94:$V7}),o($V51,$V6,{40:10,10:144,94:$V7}),o($V51,$V6,{40:10,10:145,94:$V7}),o($V51,$V6,{40:10,10:146,94:$V7}),o($V51,$V6,{40:10,10:147,94:$V7}),o($V51,$V6,{40:10,10:148,94:$V7}),o($V51,$V6,{40:10,10:149,94:$V7}),o($V51,$V6,{40:10,10:150,94:$V7}),o($V61,$V6,{40:10,10:151,94:$V7}),o($V71,[2,47]),o($V71,[2,48]),o($V51,$V6,{40:10,10:152,94:$V7}),o($V51,$V6,{40:10,10:153,94:$V7}),o($V51,$V6,{40:10,10:154,94:$V7}),o($V51,$V6,{40:10,10:155,94:$V7}),o($V41,[2,112]),o($V51,$V6,{40:10,10:156,94:$V7}),o($V81,[2,18]),o($V81,[2,19]),{10:161,12:$V91,22:$Va1,33:$Vb1,40:10,45:157,50:162,51:$Vc1,76:158,77:159,94:$V7},{22:$Vh,38:$Vk,51:$Vn,53:165,54:46,57:47,58:48,59:49,60:$Vo,61:53,62:54,63:55,64:$Vp,65:$Vq,94:$VC},{11:$VE,22:$VF,23:$VG,32:[1,166],34:130,35:131,36:$VY,37:$VZ,38:$V_,39:$V$,40:136,41:89,47:92,48:$VH,49:$VI,60:$VJ,75:$VK,79:90,81:91,82:93,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:109,94:$V7},o($Vd1,[2,45],{44:167,38:[1,168]}),o($VX,[2,42]),o($VV,$V6,{40:10,10:169,94:$V7}),{32:[1,170]},o($VB,[2,55]),o($Vw,[2,56]),o($Vw,[2,57]),o($VB,[2,60]),o([66,69,70,71,72,73,74],$V6,{40:10,10:171,94:$V7}),{22:[1,172],62:173,65:$Vq},o($VB,[2,84]),{12:[1,174]},o($Vg,[2,16]),o([1,15,20,22,25,31,38,42,46,51,60,64,65,96,97,103],$V6,{40:10,10:175,94:$V7}),o($V01,[2,31]),o([12,32,36,37,38,39,94],[2,40],{41:89,79:90,81:91,47:92,82:93,92:109,34:176,11:$VE,22:$VF,23:$VG,48:$VH,49:$VI,60:$VJ,75:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT}),o($Ve1,$V6,{40:10,10:177,94:$V7}),o($Ve1,$V6,{40:10,10:178,94:$V7}),o($Ve1,$V6,{40:10,10:179,94:$V7}),o($Ve1,$V6,{40:10,10:180,94:$V7}),o($Ve1,[2,38],{94:$Vb}),{11:$VE,22:$VF,23:$VG,47:92,48:$VH,49:$VI,60:$VJ,75:$VK,79:181,81:91,82:93,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:109},o($V41,[2,95]),o($V61,$V6,{40:10,10:182,94:$V7}),o($V61,$V6,{40:10,10:183,94:$V7}),o($V61,$V6,{40:10,10:184,94:$V7}),o($V41,[2,97]),o($V41,[2,99]),o($V41,[2,100]),o($V41,[2,101]),o($V41,[2,102]),o($V41,[2,103]),o($V41,[2,104]),o($V41,[2,105]),o($V41,[2,106]),{11:$VE,22:$VF,23:$VG,41:185,47:92,48:$VH,49:$VI,60:$VJ,75:$VK,79:90,81:91,82:93,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:109},o($V41,[2,108]),o($V41,[2,109]),o($V41,[2,110]),o($V41,[2,111]),o($V41,[2,117]),{10:161,12:$V91,22:$Va1,33:[1,186],40:10,50:162,51:$Vc1,76:187,77:159,94:$V7},o($Vf1,[2,85]),o($Vf1,[2,87]),o($Vf1,[2,88]),o($Vf1,[2,89]),{38:[1,188]},{10:189,38:$V6,40:10,94:$V7},{22:[1,190]},o($Vw,$Vx,{55:72,32:$Vg1,39:$Vg1,49:$Vz,56:$VA}),o([22,25,31,33,38,42,46,51,60,64,65,96,97,103],$V6,{40:10,10:191,94:$V7}),{10:192,32:$V6,40:10,94:$V7},{22:[1,193]},{10:161,12:$V91,22:$Va1,33:$Vb1,40:10,45:194,50:162,51:$Vc1,76:158,77:159,94:$V7},o($Vh1,$V6,{40:10,10:195,94:$V7}),{66:[1,196],67:197,69:[1,198],70:[1,199],71:[1,200],72:[1,201],73:[1,202],74:[1,203]},{10:204,37:$V6,40:10,94:$V7},{10:205,37:$V6,40:10,94:$V7},o([1,20,22,25,31,38,42,46,51,60,64,65,96,97,103],$V6,{40:10,10:206,94:$V7}),o($V0,[2,9]),o($V01,[2,32]),o($V01,[2,34]),o($V01,[2,35]),o($V01,[2,36]),o($V01,[2,37]),o($V41,[2,94]),o($V61,[2,113]),o($V61,[2,114]),o($V61,[2,115]),{11:$VE,22:$VF,23:$VG,37:[1,207],39:$V11,47:92,48:$VH,49:$VI,60:$VJ,69:$V21,75:$VK,79:138,80:137,81:91,82:93,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:109,93:$V31},o($Vi1,$V6,{40:10,10:208,94:$V7}),o($Vf1,[2,86]),o($V61,$V6,{40:10,10:209,94:$V7}),{38:[2,49]},{10:210,38:$V6,40:10,94:$V7},{5:65,8:211,22:$Vh,24:31,25:$Vi,26:34,27:35,28:36,29:37,30:38,31:$Vj,33:$V2,38:$Vk,42:$Vl,46:$Vm,51:$Vn,52:39,53:44,54:46,57:47,58:48,59:49,60:$Vo,61:53,62:54,63:55,64:$Vp,65:$Vq,94:$V3,95:5,96:$V4,97:$V5,98:43,103:$Vr},{32:[1,212]},o($Vd1,[2,44]),{10:161,12:$V91,22:$Va1,33:[1,213],40:10,50:162,51:$Vc1,76:187,77:159,94:$V7},{11:$Vj1,22:$Vk1,33:[2,131],84:$Vl1,99:214,100:215,101:216,102:217},o($Vm1,[2,71]),o([11,22],$V6,{40:10,10:221,94:$V7}),o($Vn1,[2,73]),o($Vn1,[2,74]),o($Vn1,[2,75]),o($Vn1,[2,76]),o($Vn1,[2,77]),o($Vn1,[2,78]),{37:[1,222]},{37:[1,223]},o($Vs,[2,15]),o($V51,$V6,{40:10,10:224,94:$V7}),o($Vv,[2,51]),{11:$VE,22:$VF,23:$VG,41:225,47:92,48:$VH,49:$VI,60:$VJ,75:$VK,79:90,81:91,82:93,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:109},{38:[2,50]},{5:65,22:$Vh,24:64,26:34,27:35,28:36,29:37,30:38,31:$Vj,33:[1,226],38:$Vk,42:$Vl,46:$Vm,51:$Vn,52:39,53:44,54:46,57:47,58:48,59:49,60:$Vo,61:53,62:54,63:55,64:$Vp,65:$Vq,94:$V3,95:5,96:$V4,97:$V5,98:43,103:$Vr},o($VV,$V6,{40:10,10:227,94:$V7}),o($Vi1,$V6,{40:10,10:228,94:$V7}),{11:$Vj1,22:$Vk1,33:[1,229],84:$Vl1,100:230,101:216,102:217},o($Vh1,[2,129]),{32:[1,231],39:[1,232]},o($Vo1,$V6,{40:10,10:233,94:$V7}),o($Vp1,[2,135]),o($Vp1,[2,136]),o($Vp1,[2,137]),{11:[1,236],22:[1,235],68:234},o($VB,[2,82]),o($VB,[2,83]),o($V41,[2,107]),o([12,33,51],$V6,{40:10,81:91,47:92,82:93,92:109,80:137,79:138,10:237,11:$VE,22:$VF,23:$VG,39:$V11,48:$VH,49:$VI,60:$VJ,69:$V21,75:$VK,78:[1,238],83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,93:$V31,94:$V7}),o($Vi1,$V6,{40:10,10:239,94:$V7}),{10:161,12:$V91,22:$Va1,33:$Vb1,40:10,45:240,50:162,51:$Vc1,76:158,77:159,94:$V7},o($Vv,[2,46]),o($Vi1,$V6,{40:10,10:241,94:$V7}),o($Vh1,[2,130]),o($VV,$V6,{40:10,10:242,94:$V7}),{11:$Vj1,22:$Vk1,84:$Vl1,102:243},o($Vo1,[2,133]),{10:244,40:10,66:$V6,94:$V7},o($Vq1,[2,79]),o($Vq1,[2,80]),o($Vf1,[2,90]),o($VV,$V6,{40:10,10:245,94:$V7}),o($Vv,[2,29]),{10:161,12:$V91,22:$Va1,33:[1,246],40:10,50:162,51:$Vc1,76:187,77:159,94:$V7},o($Vv,[2,128]),{10:161,12:$V91,22:$Va1,33:$Vb1,40:10,45:247,50:162,51:$Vc1,76:158,77:159,94:$V7},o($Vo1,$V6,{40:10,10:248,94:$V7}),{66:[1,249]},o($Vf1,[2,91]),o($Vi1,$V6,{40:10,10:250,94:$V7}),{10:161,12:$V91,22:$Va1,33:[1,251],40:10,50:162,51:$Vc1,76:187,77:159,94:$V7},o($Vo1,[2,134]),o($Vm1,[2,72]),o($Vv,[2,41]),o($Vh1,$V6,{40:10,10:252,94:$V7}),o($Vh1,[2,132])],
defaultActions: {75:[2,138],189:[2,49],210:[2,50]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 94;
break;
case 1:
break;
case 2:return 96;
break;
case 3:return 97;
break;
case 4:return 70;
break;
case 5:return 71;
break;
case 6:return 72;
break;
case 7:return 73;
break;
case 8:return 74;
break;
case 9:return 78;
break;
case 10:return 23;
break;
case 11:return 23;
break;
case 12:return "FUNCTION";
break;
case 13:return 103;
break;
case 14:return 11;
break;
case 15:return 22;
break;
case 16:return 60;
break;
case 17:return 15;
break;
case 18:return 42;
break;
case 19:return 31;
break;
case 20:return 46;
break;
case 21:return 9;
break;
case 22:return 20;
break;
case 23:return 86;
break;
case 24:return 87;
break;
case 25:return 85;
break;
case 26:return 85;
break;
case 27:return 85;
break;
case 28:return 85;
break;
case 29:return 85;
break;
case 30:return 85;
break;
case 31:return 88;
break;
case 32:return 88;
break;
case 33:return 88;
break;
case 34:return 89;
break;
case 35:return 89;
break;
case 36:return 90;
break;
case 37:return 90;
break;
case 38:return 'DIMEN';
break;
case 39:return 84;
break;
case 40:return 83;
break;
case 41:return 91;
break;
case 42:return 91;
break;
case 43:return yy_.yytext;
break;
}
},
rules: [/^(?:[ \t\r\n\f]+)/,/^(?:\/\*[^*]*\*+([^/][^*]*\*+)*\/)/,/^(?:<!--)/,/^(?:-->)/,/^(?:~=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:\$=)/,/^(?:\*=)/,/^(?:!([ \t\r\n\f]*)important\b)/,/^(?:url\(([ \t\r\n\f]*)(("([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|'|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|"|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*'))([ \t\r\n\f]*)\))/,/^(?:url\(([ \t\r\n\f]*)(([!#$%&*-~]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*)([ \t\r\n\f]*)\))/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*)\()/,/^(?:([@](-webkit-|-o-|-moz-|-ms-)?keyframes\b))/,/^(?:(("([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|'|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\(\n|\r\n|\r|\f)|"|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:#(([_]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))+))/,/^(?:@import\b)/,/^(?:@page\b)/,/^(?:@media\b)/,/^(?:@font-face\b)/,/^(?:@charset\b)/,/^(?:@namespace\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))em\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))ex\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))px\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))cm\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))mm\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))in\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))pt\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))pc\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))deg\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))rad\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))grad\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))ms\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))s\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))Hz\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))kHz\b)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))([-]?([a-zA-Z]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\([0-9a-fA-F]){1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))%)/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+)))/,/^(?:U\+(\?{1,6}|([0-9a-fA-F])(\?{0,5}|([0-9a-fA-F])(\?{0,4}|([0-9a-fA-F])(\?{0,3}|([0-9a-fA-F])(\?{0,2}|([0-9a-fA-F])(\??|([0-9a-fA-F]))))))))/,/^(?:U\+([0-9a-fA-F]){1,6}([0-9a-fA-F]){1,6})/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}